Bug Write Up for Part 2

crash1.gft

Changed the value of examplegc.num_bytes to -1 from 116 in giftcardexamplewirter.c 
Generated crash1.gft file using giftcardexamplewirter.c 
Used GDB to step through program to identify the fucntion where code crashed: gdb --args ./gift 1 crash1.gft
the program crashed in line fread(&ret_val->num_bytes, 4,1, input_fd);
180		while (!feof(input_fd)) {
(gdb) 
Thread 2 received signal SIGSEGV, Segmentation fault.
0x00007fff2039d0e0 in ?? ()

Bug: 

The crash.gft file making a request that is too large and the space cannot be allocated and a null pointer is returned.
The negative valeu (-1) passed via num_bytes is converted to an ungsigned value of type size_it which leads to a huge
positive value.

Fix: 
Added a check in giftcardreader.c program to validate the value of num_bytes.

        if (ret_val->num_bytes < 0) {

        printf (" Negative value exiting \n");
        exit(0);


Crash2.gft

being worked on


hang.gft

i used the case 0x09 in the animate funciton to create a loop that caused the program to stay in the loop
and cause the hang. The animate function was reached by changing the examplegcrd.type_of_record = 3; 
in giftcardexamplewirter . I also passed value 250 ( signed 8 bit integer value -6) as arg1 for case 0x09. 
I realizrd that passing -3, -6, -9, -12 or any signed char values multiple of 3 as arg1 will cause the program to hang. 
if 253 or (-3) is used as arg1 , will cause pc to go back by 3 memory location however, outside the while loop 
pc+=3; will cuase PC to go three memory location and never satisfying the contditon if (pc > program+256) break; and stay in the 
loop causing the hang.

Fix:
  arg1 is declrased as unsigned char inside the while loop:
   while (1) {
        unsigned char op, arg1, arg2;

however, in case 0x09, the vulnerability was created by allowing the casting of signed char on pc += (char)arg1;
updated the line of code pc += arg1; to only allow casting of unsigned char and stop PC to move
back and forth.



    