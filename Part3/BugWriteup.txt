Bug write up for Part 3.

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
coverage report for crash1.gft, hang.gft, cov1.gft and cov2.gft
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Compiled giftcardreader program with --coverage option : gcc -coverage giftcardreader.c -o giftcardreader
Ran crash1.gft from part 2 where the reader program exits when a value <0 is passed to num_bytes: ./giftcardreader 1 crash1.gft
Ran giftcardreader with gcov to find out the percentage of code covered when passing crash1.gft file: gcov giftcardreader

Farhans-MBP:appsecassignment1 farhanabdullah$ gcov giftcardreader
File 'giftcardreader.c'
Lines executed:6.90% of 174
giftcardreader.c:creating 'giftcardreader.c.gcov'

Generated html report using lcov and noticed the lines and function covered when passing crash1.gft 

 there were 12 hits in the 174 lines of code, 6.9% 
 there were 2 hits out of 6 functions in giftcardreader program, 33.3%

 Created a test file cov1.gft by modifying  giftcardexamplewriter: examplegcrd.type_of_record = 2; 
 Ran cov1.gft and observed the coverage.

 it generated 36.78% coverage:

Farhans-MBP:appsecassignment1 farhanabdullah$ gcov giftcardreader
File 'giftcardreader.c'
Lines executed:36.78% of 174
giftcardreader.c:creating 'giftcardreader.c.gcov'

the lcov code coverage report indicates a much higher coverage. all lines in giftcardreader is covered for record type =2

 there were 64 hits in the 174 lines of code, 36.8% 
 there were 4 hits out of 6 functions in giftcardreader program, 66.7%


 Ran hang.gft from part 2 to view code coverage. The reader program enters an infinite loop/hang in the animate function when hang.gft is passed.

 hang.gft covered 54.60% of the code.

 Farhans-MBP:appsecassignment1 farhanabdullah$ ./giftcardreader 1 hang.gft
   Merchant ID: GiftCardz.com                   
   Customer ID: DuaneGreenes Store 1451         
   Num records: 1
      record_type: animated message
      message: ?
  [running embedded program]  
  Total value: 0

Farhans-MBP:appsecassignment1 farhanabdullah$ gcov giftcardreader
File 'giftcardreader.c'
Lines executed:54.60% of 174
giftcardreader.c:creating 'giftcardreader.c.gcov'


generated the lcov report and it indicated the following for hang.gft file from Part2:

 there were 95 hits in the 174 lines of code, 54.6% 
 there were 5 hits out of 6 functions in giftcardreader program, 83.3%

 Created a test file cov2.gft by modifying  giftcardexamplewriter: examplegcrd.type_of_record = 3; The record type 3 invokes the animate function.
 in our hang.gft case, we only focused on creating a loop and only targeted case 0x09, by setting the record type to 3 , i am hoping to get more 
 coverage for the prgoram to go through all the cases.

 Ran cov2.gft and observed the coverage. 

 Farhans-MBP:appsecassignment1 farhanabdullah$ ./giftcardreader 1 cov2.gft
   Merchant ID: GiftCardz.com                   
   Customer ID: DuaneGreenes Store 1451         
   Num records: 1
      record_type: animated message
      message: ?
  [running embedded program]  
?
  Total value: 0

Farhans-MBP:appsecassignment1 farhanabdullah$ gcov giftcardreader
File 'giftcardreader.c'
Lines executed:58.05% of 174
giftcardreader.c:creating 'giftcardreader.c.gcov'

it produced 58.05% code coverage. Running lcov report provides the following stats:

 there were 101 hits in the 174 lines of code, 58.0% 
 there were 5 hits out of 6 functions in giftcardreader program, 83.3%

 we see higher coverage with cov2.gft file and comapring with the previous file, we see that lines in cases 0x01, 0x03 and 0x7 are
 being covered which was not the case for hang.gft


 #######################################################
 Code Coverage AFTER RUNNING AFL FUZZER
 #######################################################

As indicated in the assigned i picked two test cases from my AFL queue directory to produce new coverage report.
Renamed test case 1 to postfuzztestcase1.gft
Ran the input file against the gifcardreader wtih coverage option: ./giftcardreader 1 postfuzztestcase1.gft
Ran giftcardreader with gcov to find out the percentage of code covered when passing post fuzzing test case file: gcov giftcardreader

Farhans-MBP:appsecassignment1 farhanabdullah$ gcov giftcardreader
File 'giftcardreader.c'
Lines executed:67.24% of 174
giftcardreader.c:creating 'giftcardreader.c.gcov'

we see much higher coverage than the previous .gft files and confirms that tests generated by the fuzzer reach more parts of the gift card program.

Running lcov report provides the following stats:

 there were 117 hits in the 174 lines of code, 66.2% 
 there were 5 hits out of 6 functions in giftcardreader program, 83.3%

*****************************************************************************

Renamed test case 2 to postfuzztestcase1.gft
Ran the input file against the gifcardreader wtih coverage option: ./giftcardreader 1 postfuzztestcase2.gft
Ran giftcardreader with gcov to find out the percentage of code covered when passing post fuzzing test case file: gcov giftcardreader

Farhans-MBP:appsecassignment1 farhanabdullah$ gcov giftcardreader
File 'giftcardreader.c'
Lines executed:68.39% of 174
giftcardreader.c:creating 'giftcardreader.c.gcov'

we see  higher coverage again than the previous .gft files and confirms that tests generated by the fuzzer reach more parts of the gift card program.

Running lcov report provides the following stats:

 there were 119 hits in the 174 lines of code, 68.4% 
 there were 5 hits out of 6 functions in giftcardreader program, 83.3%


 ***************************************************************************************


 ############################################################################
 Fuzzer1.gft and fuzzer2.gift analysis and fix
 #############################################################################

 After analyzing the AFL output queue , the crash and hang folders, i found
 many cases were false positive. 
 
 Fuzzer1: I picked one of the case that created a segmentation 
 fault. Segmentation fault (core dumped). After analyzing the crash with GDB, it seems the segmentation fault
 occurs int the animate function case:   case 0x03: mptr += (char)arg1;. 
 Additionally, i reviewed the fuzzer1.gft file in hex editor and found that the crash
 is occuring when arg1 has the value 249 (unsigned)/-7 (signed) which
 is casted as signed char, probably causing the program to crashwhile reading inaccessible memory. 

 Fuzzer1 Crash fix: Similar to the case discovered in part 2 (hang.gft), case 0x09
 where the reader program hangs due to casting a signed char. fixed 
 the line of code where arg1 needs to  unsigned char mptr += (unsigned char)arg1 and 
 therefore prventing the memory access error.


 Fuzzer 2: i ran AFL twice and not able to find a unique hang cases in my
 hang folder in AFL. One of the case that i found in the hang folder was causing a segmentation
 fault instead of a hang. I decided to use this as my fuzzer2.gft 

 After running through GDB i realized that it crashed in the animate function with the below error message
 found in GDB:

 Program received signal SIGSEGV, Segmentation fault.
0x0000555555555430 in animate (msg=0x55555555a880 "\300\a", program=0x55555555a8b0 "^^^")
    at giftcardreader.c:74

After setting the breakpoint in the animate function, i noticed that the fault might have occured
in the  case 0x04: regs[arg2] = arg1;  break;

i am not 100% certain what might be causing the crash. however, my theory is that the size of the register
aray is 16 bytes, declared as "unsigned char regs[16];" in the animate function.
Therefore, if we try to store a value greater than 16 bytes , the program will
try to access some piece of memory which is not owned by it, and may have caused the crashing
of the program with a segmenation fault. 

i have also examined the examined the fuzzer2.gft in hex editor and it seems that hex values 
that is being passed at the time of the crash: op: 04 reg1: 21 and reg2: 2F in case case 0x04: regs[arg2] = arg1;
i have tried to manipulate the value of reg2 wtih hex: 09, 0A, 0B and 0C and no crashes occured.

Fix: 

i added bound checking for arg2 and made the follwoing changes to reader program to
run the fuzzer2.gft without any errors.

if (arg2 < 16)
regs[arg2] = arg1;
 break;


